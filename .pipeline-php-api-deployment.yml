##### variables #####
variables:
  PIPELINE_PHP_IMAGE: ${CI_REGISTRY}/${CI_PROJECT_PATH}/phpfpm
  PIPELINE_PHPFPM_NAME: phpfpm_${CI_PIPELINE_ID}
  APP_ENV_NAME_STAGING: STAGING
  APP_ENV_STAGING: stage
  APP_ENV_PRODUCTION: production
  APP_ENV_NAME_PRODUCTION: PRODUCTION

##### docker login with Ci credentials #####
.login_docker:
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

##### create docker credentials on runner #####
.setup_deploy_script: &setup_deploy
                        mkdir $HOME/.docker
                        && echo $(eval echo "\$${ENV_NAME}_DOCKER_CA") | base64 -d > $HOME/.docker/ca.pem
                        && echo $(eval echo "\$${ENV_NAME}_DOCKER_CERT") | base64 -d > $HOME/.docker/cert.pem
                        && echo $(eval echo "\$${ENV_NAME}_DOCKER_KEY") | base64 -d  > $HOME/.docker/key.pem

##### create docker network #####
.create_docker_network: &create_docker_network
                          docker network create ${PIPELINE_NETWORK_NAME} || true

##### actual deployment task #####
.deploy_phpfpm_script: &deploy_phpfpm
                         docker run -d
                         --restart unless-stopped
                         --env-file .deploy_env
                         -h ${PIPELINE_PHPFPM_CONTAINER_HOST_NAME}
                         --network ${PIPELINE_NETWORK_NAME}
                         --name ${PIPELINE_PHPFPM_CONTAINER_NAME}
                         ${PIPELINE_PHP_IMAGE}:${PIPELINE_IMAGE_PREFIX}${CI_PIPELINE_ID}

##### stops and removes running container #####
.stop_phpfpm_container: &stop_phpfpm_container
                          docker stop ${PIPELINE_PHPFPM_CONTAINER_NAME} || true && docker rm ${PIPELINE_PHPFPM_CONTAINER_NAME} || true


##### docker login with Ci credentials #####
.login_docker_script: &login_docker
                        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

##### verbose output and docker pull #####
.prepare_phpfpm_deployment_script: &prepare_php_api_deployment
                                     echo "===== Environment => ${ENV_NAME} ====="
                                     && echo $(eval echo "\$${ENV_NAME}_${REGION}_APP_ENV")
                                     && echo "===== Region => ${REGION} ====="
                                     && echo ${PIPELINE_PHP_IMAGE}:${CI_PIPELINE_ID}
                                     && docker pull ${PIPELINE_PHP_IMAGE}:${CI_PIPELINE_ID}

##### phpfpm deployment template for staging #####
.deploy_staging_php_api_template: &deploy_staging_php_api_template
  stage: deploy
  script:
    - export DOCKER_HOST=tcp://${PLISTA_NODE}.plista.com:2376 DOCKER_TLS_VERIFY=1
    - *setup_deploy
    - *login_docker
    - *create_docker_network
    - *prepare_php_api_deployment
    - *stop_phpfpm_container
    - *deploy_phpfpm

##### phpfpm deployment template for production #####
.deploy_production_php_api_template: &deploy_production_php_api_template
  stage: deploy
  script:
    - export DOCKER_HOST=tcp://${PLISTA_NODE}.plista.com:2376 DOCKER_TLS_VERIFY=1
    - *setup_deploy
    - *login_docker
    - *prepare_php_api_deployment
    - *stop_phpfpm_container
    - *deploy_phpfpm

##### phpfpm deployment template for staging Europe #####
.deploy_staging_europe_template_php_api:
  variables:
    PLISTA_NODE: ${PIPELINE_PLISTA_NODE_STAGING_EUROPE_1}
    REGION: EUROPE
    ENV_NAME: ${APP_ENV_NAME_STAGING}
    APP_ENV: ${APP_ENV_STAGING}
  stage: deploy
  <<: *deploy_staging_php_api_template

##### phpfpm deployment template for production Europe #####
.deploy_production_europe_template_php_api:
  variables:
    PLISTA_NODE: ${PIPELINE_PLISTA_NODE_PRODUCTION_EUROPE_1}
  only: [master]
  stage: deploy
  <<: *deploy_production_php_api_template

##### phpfpm deployment template for production North America #####
.deploy_production_us_east_template_php_api:
  variables:
    PLISTA_NODE: ${PIPELINE_PLISTA_NODE_PRODUCTION_US_EAST_1}
  only: [master]
  stage: deploy
  <<: *deploy_production_php_api_template
