image: docker:dind

include:
  - '/.pipeline-php-api-deployment.yml'
  - project: 'platforms/pipeline-tools'
    ref: 'stable'
    file: 'gitlab/sonarqube.yml'

variables:
  NETWORK_NAME: burgeramt_termin_${CI_PIPELINE_ID}
  PIPELINE_SERVICE_NAME: burgeramt_termin
  PIPELINE_PHP_IMAGE:   ${CI_REGISTRY}/${CI_PROJECT_PATH}/phpfpm

##### docker login with Ci credentials #####
.login_docker_script: &login_docker
                        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}

stages:
  - build
  - test
  - analysis
  - push
  - approve_deployment
  - deploy

build_phpfpm:
  stage: build
  script:
    - IMAGE=${PIPELINE_PHP_IMAGE}:ci-${CI_PIPELINE_ID}
    - echo "Building PHP '${IMAGE}'"
    - >
      docker build
      --build-arg SSH_KEY="${SSH_KEY}"
      --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      --build-arg VCS_REF=${CI_COMMIT_SHA}
      -t ${IMAGE} --file Dockerfile.php .
    - *login_docker
    - echo "Pushing PHP '${IMAGE}'"
    - docker push ${IMAGE}
  except:
    - tags

test_unit:
  stage: test
  dependencies:
    - build_phpfpm
  script:
    - *login_docker
    - mkdir reports
    - docker run
      -d
      --name ${PIPELINE_PHPFPM_NAME}
      --env APP_ENV=test
      --env-file env/testing
      --env PLISTA_XDEBUG_ENABLE=1
      ${PIPELINE_PHP_IMAGE}:ci-${CI_PIPELINE_ID}
    - docker exec ${PIPELINE_PHPFPM_NAME} sh -c "composer install && ./vendor/bin/phpunit --coverage-text --colors=never --coverage-clover=phpunit.coverage.xml --log-junit=phpunit.report.xml && ls -lah"
    - docker cp ${PIPELINE_PHPFPM_NAME}:/srv/api/phpunit.coverage.xml reports/
    - docker cp ${PIPELINE_PHPFPM_NAME}:/srv/api/phpunit.report.xml reports/
    - docker stop ${PIPELINE_PHPFPM_NAME} || true
    - docker rm ${PIPELINE_PHPFPM_NAME} || true
  artifacts:
    name: "$CI_COMMIT_REF_SLUG"
    expire_in: 1 week
    paths:
      - reports/

sonarqube:
  dependencies:
    - test_unit
  extends: .sonarqube_template

sonarqube-reports:
  dependencies:
    - test_unit
  extends: .sonarqube_reports_template

push_phpfpm:
  only: [next, master]
  stage: push
  script:
    # we pull the image we built and tagged with ci- ...
    - CI_IMAGE=${PIPELINE_PHP_IMAGE}:ci-${CI_PIPELINE_ID}
    - FINAL_IMAGE=${PIPELINE_PHP_IMAGE}:${CI_PIPELINE_ID}
    - *login_docker
    - echo "Pulling image ${CI_IMAGE}"
    - docker pull ${CI_IMAGE}
    # ... tag it with the final tag
    - docker tag ${CI_IMAGE} ${FINAL_IMAGE}
    # ... then push it back to the repository
    - docker push ${FINAL_IMAGE}
  except:
    - tags

.deployment: &deployment
  stage: deploy
  before_script:
    # is defined in gitlab notification group
    - echo APP_ENV=${APP_ENV} >> .deploy_env
    - echo APP_DEBUG=false >> .deploy_env
    - echo GRAYLOG_HOST=${APP_GRAYLOG_HOST} >> .deploy_env
    - echo GRAYLOG_PORT=${APP_GRAYLOG_PORT} >> .deploy_env
    - echo STATSD_HOST=${APP_STATSD_HOST} >> .deploy_env
    - echo STATSD_PORT=${APP_STATSD_PORT} >> .deploy_env
    - echo STATSD_NAMESPACE=$(echo $APP_STATSD_BASE_NAMESPACE.$ENV_NAME.${PIPELINE_SERVICE_NAME} | tr '[:upper:]' '[:lower:]') >> .deploy_env
    - echo AWS_KEY=$(eval echo "\$APP_${ENV_NAME}_AWS_KEY") >> .deploy_env
    - echo AWS_SECRET=$(eval echo "\$APP_${ENV_NAME}_AWS_SECRET") >> .deploy_env
    - echo AWS_REGION_S3=${AWS_REGION_S3} >> .deploy_env
    - echo AWS_S3_BUCKET=$(eval echo "\$APP_${ENV_NAME}_${REGION}_AWS_BUCKET_S3") >> .deploy_env
    - echo REPORT_SERVICE_URL=$(eval echo "\$APP_${ENV_NAME}_REPORT_SERVICE_URL") >> .deploy_env
    - echo API_SERVER_URL=$(eval echo "\$APP_${ENV_NAME}_${REGION}_HOST_API_SERVER") >> .deploy_env
    - echo API_SERVER_USER=$APP_PLISTA_API_USER >> .deploy_env
    - echo API_SERVER_PASSWORD=$APP_PLISTA_API_PASSWORD >> .deploy_env

deploy_staging_europe:
  variables:
    REGION: EUROPE
    ENV_NAME: STAGING
    APP_ENV: ${APP_ENV_STAGING}
    APP_DEBUG: ${APP_DEBUG_STAGING}
    AWS_REGION_S3: ${APP_AWS_REGION_EUROPE_CENTRAL_1}
    PIPELINE_PHPFPM_CONTAINER_NAME: ${PIPELINE_SERVICE_NAME}_phpfpm
    PIPELINE_PHPFPM_CONTAINER_HOST_NAME: ${PIPELINE_SERVICE_NAME}_${PIPELINE_PLISTA_NODE_STAGING_EUROPE_1}
    PIPELINE_NETWORK_NAME: 'internal'
  extends: .deploy_staging_europe_template_php_api
  only: [next]
  <<: *deployment

deploy_any_branch_staging_europe:
  variables:
    REGION: EUROPE
    ENV_NAME: STAGING
    APP_ENV: ${APP_ENV_STAGING}
    APP_DEBUG: ${APP_DEBUG_STAGING}
    AWS_REGION_S3: ${APP_AWS_REGION_EUROPE_CENTRAL_1}
    PIPELINE_PHPFPM_CONTAINER_NAME: ${PIPELINE_SERVICE_NAME}_phpfpm
    PIPELINE_PHPFPM_CONTAINER_HOST_NAME: ${PIPELINE_SERVICE_NAME}_${PIPELINE_PLISTA_NODE_STAGING_EUROPE_1}
    PIPELINE_NETWORK_NAME: 'internal'
    PIPELINE_IMAGE_PREFIX: 'ci-'
  extends: .deploy_staging_europe_template_php_api
  except: [next, master]
  when: manual
  <<: *deployment

deploy_production_europe:
  when: manual
  variables:
    REGION: EUROPE
    ENV_NAME: PRODUCTION
    APP_ENV: ${APP_ENV_PRODUCTION}
    AWS_REGION_S3: ${APP_AWS_REGION_EUROPE_CENTRAL_1}
    PIPELINE_PHPFPM_CONTAINER_NAME: ${PIPELINE_SERVICE_NAME}_phpfpm
    PIPELINE_PHPFPM_CONTAINER_HOST_NAME: ${PIPELINE_SERVICE_NAME}_${PIPELINE_PLISTA_NODE_PRODUCTION_EUROPE_1}
    PIPELINE_NETWORK_NAME: 'internal'
  extends: .deploy_production_europe_template_php_api
  <<: *deployment

#deploy_production_ohio:
#  dependencies:
#    - approve_deployment
#  variables:
#    REGION: US_EAST
#    ENV_NAME: PRODUCTION
#    APP_ENV: ${APP_ENV_PRODUCTION}
#    AWS_REGION_S3: ${APP_AWS_REGION_EUROPE_CENTRAL_1}
#    PIPELINE_PHPFPM_CONTAINER_NAME: ${PIPELINE_SERVICE_NAME}_phpfpm
#    PIPELINE_PHPFPM_CONTAINER_HOST_NAME_NODE_1: ${PIPELINE_SERVICE_NAME}_${PIPELINE_PLISTA_NODE_PRODUCTION_US_EAST_1}
#    PIPELINE_PHPFPM_CONTAINER_HOST_NAME_NODE_2: ${PIPELINE_SERVICE_NAME}_${PIPELINE_PLISTA_NODE_PRODUCTION_US_EAST_2}
#    PIPELINE_NETWORK_NAME: 'internal'
#  extends: .deploy_production_us_east_template_php_api
#  <<: *deployment
